/**
 * Dank Agent Configuration
 * 
 * This file defines your AI agents and their configurations.
 * Run 'dank run' to start all defined agents.
 */

const { createAgent } = require('dank-ai');

module.exports = {
  // Project configuration
  name: 'test-scaffolding',
  
  // Define your agents
  agents: [
    // Example 1: Direct Prompting Agent with Event Handlers
    createAgent('prompt-agent')
      .setLLM('openai', {
        apiKey: process.env.OPENAI_API_KEY,
        model: 'gpt-3.5-turbo',
        temperature: 0.7
      })
      .setPrompt('You are a helpful AI assistant. Be concise and friendly in your responses.')
      .setBaseImage('nodejs-20')
      .setPromptingServer({
        protocol: 'http',
        port: 3000
      })
      .setResources({
        memory: '512m',
        cpu: 1
      })
      // Event handlers for prompt modification and response enhancement
      .addHandler('request_output:start', (data) => {
        console.log('[Prompt Agent] Processing prompt:', data.conversationId);
        console.log('[Prompt Agent] Original prompt:', data.prompt);
        
        // Enhance the prompt with context
        const enhancedPrompt = `Context: You are a helpful AI assistant. Please be concise and friendly.\n\nUser Question: ${data.prompt}\n\nPlease provide a clear, helpful response.`;
        
        console.log('[Prompt Agent] Enhanced prompt:', enhancedPrompt);
        
        return {
          prompt: enhancedPrompt
        };
      })
      .addHandler('request_output', (data) => {
        console.log('[Prompt Agent] LLM Response:', {
          prompt: data.prompt,
          finalPrompt: data.finalPrompt,
          promptModified: data.promptModified,
          response: data.response,
          conversationId: data.conversationId,
          processingTime: data.processingTime,
          usage: data.usage,
          model: data.model
        });
      })
      .addHandler('request_output:end', (data) => {
        console.log('[Prompt Agent] Completed in:', data.processingTime + 'ms');
        console.log('[Prompt Agent] Original response:', data.response ? data.response.substring(0, 50) + '...' : 'N/A');
        
        // Enhance the response with metadata
        const enhancedResponse = `${data.response}\n\n---\n🤖 Generated by Dank Framework Agent\n⏱️ Processing time: ${data.processingTime}ms\n`;
        
        console.log('[Prompt Agent] Enhanced response:', enhancedResponse.substring(0, 100) + '...');
        
        return {
          response: enhancedResponse
        };
      })
      .addHandler('request_output:error', (data) => {
        console.error('[Prompt Agent] Error processing prompt:', data.error);
      })
      .addHandler('output', (data) => {
        console.log('[Prompt Agent] System output:', data);
      })
      .addHandler('error', (error) => {
        console.error('[Prompt Agent] System error:', error);
      }),

    // Example 2: HTTP API Agent with Tool Events
    createAgent('api-agent')
      .setLLM('openai', {
        apiKey: process.env.OPENAI_API_KEY,
        model: 'gpt-4',
        temperature: 0.3
      })
      .setPrompt('You are a specialized API assistant that helps with data processing and analysis.')
      .setBaseImage('nodejs-20')
      .setPromptingServer({
        protocol: 'http',
        port: 3001
      })
      .setResources({
        memory: '1g',
        cpu: 2
      })
      // HTTP API routes
      .get('/health', (req, res) => {
        res.json({ status: 'healthy', timestamp: new Date().toISOString() });
      })
      .post('/analyze', (req, res) => {
        res.json({ 
          message: 'Data analysis endpoint',
          data: req.body,
          timestamp: new Date().toISOString()
        });
      })
      .get('/status', (req, res) => {
        res.json({ 
          agent: 'api-agent',
          status: 'running',
          uptime: process.uptime()
        });
      })
      // Tool event handlers for HTTP requests
      .addHandler('tool:http-server:call', (data) => {
        console.log('[API Agent] HTTP Request:', {
          method: data.method,
          path: data.path,
          headers: data.headers,
          body: data.body,
          timestamp: data.timestamp
        });
      })
      .addHandler('tool:http-server:response', (data) => {
        console.log('[API Agent] HTTP Response:', {
          statusCode: data.statusCode,
          headers: data.headers,
          body: data.body,
          processingTime: data.processingTime,
          timestamp: data.timestamp
        });
      })
      .addHandler('tool:http-server:error', (data) => {
        console.error('[API Agent] HTTP Error:', {
          error: data.error,
          method: data.method,
          path: data.path,
          timestamp: data.timestamp
        });
      })
      .addHandler('output', (data) => {
        console.log('[API Agent] System output:', data);
      })
      .addHandler('error', (error) => {
        console.error('[API Agent] System error:', error);
      }),

    // Example 3: Multi-Modal Agent with All Features
    createAgent('multi-agent')
      .setLLM('openai', {
        apiKey: process.env.OPENAI_API_KEY,
        model: 'gpt-4',
        temperature: 0.5
      })
      .setPrompt('You are a versatile AI assistant that can handle both direct prompts and API requests. You excel at creative tasks and problem-solving.')
      .setBaseImage('nodejs-20')
      .setPromptingServer({
        protocol: 'http',
        port: 3002
      })
      .setResources({
        memory: '2g',
        cpu: 2
      })
      // HTTP API routes
      .get('/creative', (req, res) => {
        res.json({ 
          message: 'Creative writing endpoint',
          timestamp: new Date().toISOString()
        });
      })
      .post('/solve', (req, res) => {
        res.json({ 
          message: 'Problem solving endpoint',
          data: req.body,
          timestamp: new Date().toISOString()
        });
      })
      // Comprehensive event handling
      .addHandler('request_output:start', (data) => {
        console.log('[Multi Agent] Processing request:', data.conversationId);
        return {
          prompt: `[Multi-Modal Assistant] ${data.prompt}\n\nPlease provide a comprehensive and creative response.`
        };
      })
      .addHandler('request_output:end', (data) => {
        console.log('[Multi Agent] Response completed in:', data.processingTime + 'ms');
        return {
          response: `${data.response}\n\n✨ Enhanced by Multi-Modal Dank Agent`
        };
      })
      .addHandler('tool:http-server:*', (data) => {
        console.log('[Multi Agent] HTTP Activity:', {
          type: data.type,
          method: data.method,
          path: data.path,
          timestamp: data.timestamp
        });
      })
      .addHandler('output', (data) => {
        console.log('[Multi Agent] System output:', data);
      })
      .addHandler('error', (error) => {
        console.error('[Multi Agent] System error:', error);
      })
  ]
};
