/**
 * Dank Project Management
 * 
 * Handles project initialization, configuration generation, and scaffolding
 */

const fs = require('fs-extra');
const path = require('path');

class DankProject {
  constructor(name, options = {}) {
    this.name = name;
    this.options = {
      configFile: 'dank.config.js',
      template: 'basic',
      ...options
    };
    this.projectPath = path.resolve(process.cwd(), name);
  }

  /**
   * Initialize project structure and create example files
   */
  async init() {
    const projectDir = this.projectPath;
    
    // Create directory structure (if needed)
    // await fs.ensureDir(path.join(projectDir, this.options.outputDir));
    
    // Create example config file
    const exampleConfig = this._generateExampleConfig();
    const configPath = path.join(projectDir, this.options.configFile);
    
    if (!(await fs.pathExists(configPath))) {
      await fs.writeFile(configPath, exampleConfig, 'utf8');
      console.log(`Created example configuration: ${configPath}`);
    }

    console.log(`\\nDank project '${this.name}' initialized!`);
    console.log(`\\nNext steps:`);
    console.log(`1. Edit ${this.options.configFile} to configure your agents`);
    console.log(`2. Run 'dank run' to start your agents`);
    
    return {
      projectPath: projectDir,
      configFile: configPath
    };
  }

  /**
   * Generate example configuration file
   */
  _generateExampleConfig() {
    // Check if we're in development mode (local lib directory exists)
    const isDevelopment = fs.existsSync(path.join(this.projectPath, '../lib/index.js'));
    
    const requirePath = isDevelopment ? '../lib/index.js' : 'dank-ai';
    
    return `/**
 * Dank Agent Configuration
 * 
 * This file defines your AI agents and their configurations.
 * Run 'dank run' to start all defined agents.
 */

const { createAgent } = require('${requirePath}');

module.exports = {
  // Project configuration
  name: '${this.name}',
  
  // Define your agents
  // Each agent can have custom Docker image configuration for production builds
  agents: [
    // Example 1: Direct Prompting Agent with Event Handlers
    createAgent('prompt-agent')
      .setLLM('openai', {
        apiKey: process.env.OPENAI_API_KEY,
        model: 'gpt-3.5-turbo',
        temperature: 0.7
      })
      .setPrompt('You are a helpful AI assistant. Be concise and friendly in your responses.')
      .setBaseImage('nodejs-20')
      .setPromptingServer({
        protocol: 'http',
        port: 3000
      })
      .setResources({
        memory: '512m',
        cpu: 1
      })
      // Event handlers for prompt modification and response enhancement
      .addHandler('request_output:start', (data) => {
        console.log('[Prompt Agent] Processing prompt:', data.conversationId);
        console.log('[Prompt Agent] Original prompt:', data.prompt);
        
        // Enhance the prompt with context
        const enhancedPrompt = \`Context: You are a helpful AI assistant. Please be concise and friendly.\\n\\nUser Question: \${data.prompt}\\n\\nPlease provide a clear, helpful response.\`;
        
        console.log('[Prompt Agent] Enhanced prompt:', enhancedPrompt);
        
        return {
          prompt: enhancedPrompt
        };
      })
      .addHandler('request_output', (data) => {
        console.log('[Prompt Agent] LLM Response:', {
          prompt: data.prompt,
          finalPrompt: data.finalPrompt,
          promptModified: data.promptModified,
          response: data.response,
          conversationId: data.conversationId,
          processingTime: data.processingTime,
          usage: data.usage,
          model: data.model
        });
      })
      .addHandler('request_output:end', (data) => {
        console.log('[Prompt Agent] Completed in:', data.processingTime + 'ms');
        console.log('[Prompt Agent] Original response:', data.response ? data.response.substring(0, 50) + '...' : 'N/A');
        
        // Enhance the response with metadata
        const enhancedResponse = \`\${data.response}\\n\\n---\\n🤖 Generated by Dank Framework Agent\\n⏱️ Processing time: \${data.processingTime}ms\\n\`;
        
        console.log('[Prompt Agent] Enhanced response:', enhancedResponse.substring(0, 100) + '...');
        
        return {
          response: enhancedResponse
        };
      })
      .addHandler('request_output:error', (data) => {
        console.error('[Prompt Agent] Error processing prompt:', data.error);
      })
      .addHandler('output', (data) => {
        console.log('[Prompt Agent] System output:', data);
      })
      .addHandler('error', (error) => {
        console.error('[Prompt Agent] System error:', error);
      })
  ]
};
`;
  }
}

module.exports = { DankProject };